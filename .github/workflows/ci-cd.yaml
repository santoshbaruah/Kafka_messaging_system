name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
          pip install -r consumer/requirements.txt
          pip install -r producer/requirements.txt

      - name: Lint with flake8
        run: |
          flake8 consumer/ producer/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 consumer/ producer/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check formatting with black
        run: |
          black --check consumer/ producer/

      - name: Check imports with isort
        run: |
          isort --check-only --profile black consumer/ producer/

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r consumer/requirements.txt
          pip install -r producer/requirements.txt

      - name: Test with pytest
        run: |
          pytest --cov=./ --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push consumer image
        uses: docker/build-push-action@v4
        with:
          context: ./consumer
          file: ./consumer/Dockerfile.improved
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kafka-consumer:latest

      - name: Build and push producer image
        uses: docker/build-push-action@v4
        with:
          context: ./producer
          file: ./producer/Dockerfile.improved
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/kafka-producer:latest

  validate:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Kubernetes tools
        uses: yokawasa/action-setup-kube-tools@v0.9.2
        with:
          kubectl: '1.25.0'
          kustomize: '4.5.7'
          helm: '3.10.0'
          kubeval: '0.16.1'

      - name: Validate Kubernetes manifests with kubeval
        run: |
          kubeval --strict k8s/kafka/*.yaml
          kubeval --strict k8s/apps/*.yaml
          kubeval --strict k8s/monitoring/*.yaml

      - name: Validate Terraform configurations
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.3.0'

      - name: Terraform Format
        run: terraform fmt -check -recursive

      - name: Terraform Init
        run: |
          cd terraform
          terraform init -backend=false

      - name: Terraform Validate
        run: |
          cd terraform
          terraform validate

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Kubernetes tools
        uses: yokawasa/action-setup-kube-tools@v0.9.2
        with:
          kubectl: '1.25.0'
          helm: '3.10.0'

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_DEV }}

      - name: Deploy to development
        run: |
          kubectl create namespace kafka --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f k8s/kafka/ -n kafka
          kubectl apply -f k8s/apps/ -n kafka
          kubectl apply -f k8s/monitoring/ -n kafka

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-dev
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Kubernetes tools
        uses: yokawasa/action-setup-kube-tools@v0.9.2
        with:
          kubectl: '1.25.0'
          helm: '3.10.0'

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG_PROD }}

      - name: Deploy to production
        run: |
          kubectl create namespace kafka --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f k8s/kafka/ -n kafka
          kubectl apply -f k8s/apps/ -n kafka
          kubectl apply -f k8s/monitoring/ -n kafka
